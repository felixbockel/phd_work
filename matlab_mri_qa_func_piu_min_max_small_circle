%% create circle, within additionally min and max circles and analysis
function [piu_test,piu]=PIU_minmaxsmallcircle(dicom,t_path,T_image) 

          
          if T_image == 1
              
            [center,~]=imfindcircles(dicom,[100 200]); % find any circle inside of that image
            
          elseif T_image == 2
             
            [center,~]=imfindcircles(dicom,[50 100]); % find any circle inside of that image
          
          end

          %create large circle 20 cm²
          center(1,2)=center(1,2)+10;% to avoid that dark box is inside of the radius_roi_large circle
          area_circle=200;% 200cm² circle must be placed into large circle
          radius_roi_large= 10*(sqrt(area_circle/pi));% radius of 200cm² cirlce, radius in mm     
          dicom_info=dicominfo(t_path); % DICOM image will be read out      
          FOV=char(dicom_info.Private_0051_100c);
          FOV=FOV(9:end);
          FOV_num=double(str2double(FOV)); 
          image_size=double(dicom_info.Rows);
          resolution=image_size./FOV_num; % resolution: pixel per mm
          radius_pixel=radius_roi_large*resolution;  
          %h=viscircles(center,radius_pixel); %visualize circle, which is placed into the last opened figure
          [row,~]=size(dicom); % it is necessary that row and col have same length
          [rr,cc] = meshgrid(1:row);
          circle = sqrt((rr-center(1,1)).^2+(cc-center(1,2)).^2)<=radius_pixel; % create circle with same size and location; radius must be in pixels
          circle_double=+circle; % convert circle from logical to double 
          dicom_double=double(dicom);       
          %figure;imshow(circle,[]);
          %
          area_roi_large=circle_double.*dicom_double;
%           h = fspecial('gaussian', 6, 2);
%           area_roi_large = imfilter(area_roi, h);
          %
          
          
          %find min and max within large circle and create small circles surrounding those two values 
          [row,col]=size(area_roi_large);
          d=0;
          vec_old_compare=999999; % significant large value
            
          for i=1:col % find min value
              
                numb_values=length(find(area_roi_large(:,i) > 1));
                
                if numb_values>1
                    vec_col_dicom=area_roi_large(:,i);
                    vec_col_dicom(vec_col_dicom==0)=[];
                    vec_sort_dicom=sort(vec_col_dicom);
                    
                    if vec_sort_dicom(1)<vec_old_compare
                        vec_value = vec_sort_dicom(1);
                        [row_vec,~]=find(area_roi_large(:,i)==vec_value);    
                        vec_pos=[row_vec(1,1),i];% if row_vec consist of more than one value, just save up first
                        vec_old_compare=vec_sort_dicom(1);
                    end
                    
                end
          end
                  
          center=vec_pos; % center position for small roi circle
          area_circle=1;% 1cm² circle must be placed into large circle
          radius_roi_small= 10*(sqrt(area_circle/pi));% radius of 200cm² cirlce, radius in mm 
          radius_pixel=radius_roi_small*resolution;  
          %h=viscircles(center,radius_pixel); %visualize circle, which is placed into the last opened figure
          [rr,cc] = meshgrid(1:row);
          circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; % create circle with same size and location; radius must be in pixels
          circle_double=+circle; % convert circle from logical to double 
          area_small_min=circle_double.*area_roi_large;
          
          % check if small area is about 1cm², otherwise make the roi bigger 
          area=10; % max. 10cm², that won't be ever reached
          sum_circle_large=sum(circle_double(:));
          %sum_circle_large_95=sum_circle_large*0.95;% the small volume should include 95% of the total volume of 1cm²
          
          for i=1:area
               area_small_cor=area_small_min;
               area_small_cor(area_small_cor>0)=1; 
               sum_small=sum(area_small_cor(:)); % number of ones in a matrix
        
              if sum_circle_large >sum_small
                  area_circle=i;
                  radius_roi_small= 10*(sqrt(area_circle/pi));
                  radius_pixel=radius_roi_small*resolution;
                  circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                  circle_double=+circle; 
                  area_small_min=circle_double.*area_roi_large;
                  
              elseif sum_circle_large == sum_small
                        area_circle=i;
                        radius_roi_small= 10*(sqrt(area_circle/pi));
                        radius_pixel=radius_roi_small*resolution;
                        circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                        circle_double=+circle; 
                        area_small_max=circle_double.*area_roi_large; 
                        break
                        
              else
                  area_circle=i-2;
                  radius_roi_small= 10*(sqrt(area_circle/pi));
                  radius_pixel=radius_roi_small*resolution;
                  circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                  circle_double=+circle; 
                  area_small_min=circle_double.*area_roi_large;
                  area_small_cor=area_small_min;
                  area_small_cor(area_small_cor>0)=1; 
                  sum_small_prior=sum(area_small_cor(:));
                  compare_sum_prior=abs(sum_circle_large-sum_small_prior);
                  compare_sum_current=abs(sum_circle_large-sum_small);
                  
                  if compare_sum_prior<compare_sum_current
                        area_circle=i-2;
                        radius_roi_small= 10*(sqrt(area_circle/pi));
                        radius_pixel=radius_roi_small*resolution;
                        circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                        circle_double=+circle; 
                        area_small_min=circle_double.*area_roi_large;
                        break
                        
                  else
                        area_circle=i-1;
                        radius_roi_small= 10*(sqrt(area_circle/pi));
                        radius_pixel=radius_roi_small*resolution;
                        circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                        circle_double=+circle; 
                        area_small_min=circle_double.*area_roi_large;                    
                        break
                        
                  end
                  
              end
              
          end
          
          
          vec_old_compare=0; % significant small value
          
          for i=1:col % find max value
              
                numb_values=length(find(area_roi_large(:,i) > 1));
                
                if numb_values>1
                    vec_col_dicom=area_roi_large(:,i);
                    vec_col_dicom(vec_col_dicom==0)=[];
                    vec_sort_dicom=sort(vec_col_dicom);
                    
                    if vec_sort_dicom(end)>vec_old_compare
                        vec_value = vec_sort_dicom(end);
                        [row_vec,~]=find(area_roi_large(:,i)==vec_value);    
                        vec_pos=[row_vec(1,1),i];% if row_vec consist of more than one value, just save up first
                        vec_old_compare=vec_sort_dicom(end);
                    end
                    
                end
          end
          
          %[vec_pos_row,vec_pos_col] = find(area_roi_large == max(max(area_roi_large)));% funktioniert     
          center=vec_pos;% center position for small roi circle
          area_circle=1;% 1cm² circle must be placed into large circle
          radius_roi_small= 10*(sqrt(area_circle/pi));% radius of 200cm² cirlce, radius in mm 
          radius_pixel=radius_roi_small*resolution;
          circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; % create circle with same size and location; radius must be in pixels
          circle_double=+circle; % convert circle from logical to double 
          area_small_max=circle_double.*area_roi_large;
            
          % check if small area is much less than 1cm², otherwise make the roi bigger 
          area=10; % max. 10, that won't be ever reached
          sum_circle_large=sum(circle_double(:));
          %sum_circle_large_95=sum_circle_large*0.95;% the small volume should include 95% of the total volume of 1cm²
          
          for i=1:area
              area_small_cor=area_small_max;
              area_small_cor(area_small_cor>0)=1; 
              sum_small=sum(area_small_cor(:)); % number of ones in a matrix
        
              if sum_circle_large >sum_small
                  area_circle=i;
                  radius_roi_small= 10*(sqrt(area_circle/pi));
                  radius_pixel=radius_roi_small*resolution;
                  circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                  circle_double=+circle; 
                  area_small_max=circle_double.*area_roi_large;
                  
              elseif sum_circle_large == sum_small
                        area_circle=i;
                        radius_roi_small= 10*(sqrt(area_circle/pi));
                        radius_pixel=radius_roi_small*resolution;
                        circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                        circle_double=+circle; 
                        area_small_max=circle_double.*area_roi_large; 
                        break
                  
              else 
                  area_circle=i-2;
                  radius_roi_small= 10*(sqrt(area_circle/pi));
                  radius_pixel=radius_roi_small*resolution;
                  circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                  circle_double=+circle; 
                  area_small_max=circle_double.*area_roi_large;
                  area_small_cor=area_small_max;
                  area_small_cor(area_small_cor>0)=1; 
                  sum_small_prior=sum(area_small_cor(:));
                  compare_sum_prior=abs(sum_circle_large-sum_small_prior);
                  compare_sum_current=abs(sum_circle_large-sum_small);
                  
                  if compare_sum_prior<compare_sum_current
                        area_circle=i-2;
                        radius_roi_small= 10*(sqrt(area_circle/pi));
                        radius_pixel=radius_roi_small*resolution;
                        circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                        circle_double=+circle; 
                        area_small_max=circle_double.*area_roi_large;
                        break
                        
                  else
                        area_circle=i-1;
                        radius_roi_small= 10*(sqrt(area_circle/pi));
                        radius_pixel=radius_roi_small*resolution;
                        circle = sqrt((rr-center(1,2)).^2+(cc-center(1,1)).^2)<=radius_pixel; 
                        circle_double=+circle; 
                        area_small_max=circle_double.*area_roi_large;                    
                        break
                        
                  end
                 
                  
              end
              
          end
       
          [~,col]=size(area_small_max);
          d=0;
          
          for i=1:col % calculate mean of max value
              
                numb_values=length(find(area_small_max(:,i) > 1));
                
                if numb_values>1
                    d=d+1;
                    vec_col_dicom=area_small_max(:,i);
                    vec_col_dicom(vec_col_dicom==0)=[];
                    vec_mean(:,d)=mean(vec_col_dicom);
                    
                end
          end
          
          mean_small_max=mean(vec_mean);
          [~,col]=size(area_small_min);
          d=0;
          
          for i=1:col % calculate mean of min value
              
                numb_values=length(find(area_small_min(:,i) > 1));
                
                if numb_values>1
                    d=d+1;
                    vec_col_dicom=area_small_min(:,i);
                    vec_col_dicom(vec_col_dicom==0)=[];
                    vec_mean(:,d)=mean(vec_col_dicom);
                 
                end
          end
       
          mean_small_min=mean(vec_mean);
          
          piu=100*(1-(abs(mean_small_max-mean_small_min)/(mean_small_max+mean_small_min)));% greater or equal 87,5%
          % piu & piu_test auslesen
          
          if piu>87.5
              piu_test='piu test passed';
          else
              piu_test='piu test failed';
          end 
